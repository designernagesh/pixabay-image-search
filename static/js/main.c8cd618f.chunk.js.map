{"version":3,"sources":["components/SearchForm.js","components/ImagesList.js","App.js","components/ImageDetailsView.js","components/Router.js","serviceWorker.js","index.js"],"names":["SearchForm","props","onSubmit","searchHandle","className","type","name","ImagesList","images","map","img","key","id","Card","Img","variant","src","largeImageURL","style","height","Body","Title","Text","tags","to","pathname","state","Button","api_key","App","error","e","preventDefault","searchTerm","target","elements","searchInput","value","axios","get","then","response","setState","data","hits","this","width","color","Component","ImageDetailsView","console","log","location","imageWidth","imageHeight","pageURL","class","href","rel","Footer","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8cd618f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchForm = (props) => {\r\n    return(\r\n        <form onSubmit={ props.searchHandle } className=\"form-row mb-4\">\r\n            <input type=\"text\" name=\"searchInput\" className=\"form-control col-sm-10\" /> <button className=\"col-sm-2 btn-primary\">Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React from 'react'\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ImagesList = (props) => {\r\n    return(\r\n        props.images.map( img => \r\n            <div className=\"col-sm-3 mb-4\" key={img.id}>\r\n                <Card>\r\n                <Card.Img variant=\"top\" src={img.largeImageURL} style={{ height: '175px'}} />                \r\n                <Card.Body>\r\n                    <Card.Title>{img.type}</Card.Title>\r\n                    <Card.Text>\r\n                    {img.tags}\r\n                    </Card.Text>\r\n                    <Link to={{\r\n                        pathname: `img/${img.id}`,\r\n                        state: { img }\r\n                    }}>\r\n                        <Button variant=\"primary\">View Details</Button></Link>\r\n                </Card.Body>\r\n                </Card> \r\n            </div> \r\n        )        \r\n    )\r\n}\r\n\r\nexport default ImagesList","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport axios from 'axios'\nimport SearchForm from './components/SearchForm'\nimport ImagesList from './components/ImagesList'\nconst api_key = \"854371-808e42fe775fb0ba9da516096\"\n\nclass App extends Component {\n  state = {\n    images: [],\n    error: null\n  }\n\n  searchHandle = (e) => {      \n    e.preventDefault()\n\n    const searchTerm = e.target.elements.searchInput.value\n    axios.get(`https://pixabay.com/api/?key=${api_key}&q=${searchTerm}&image_type=photo`)\n    //.then( response =>  { searchTerm ? this.setState({ images: response.data.hits }) : this.setState({ error: \"Please, enter any serach value\" }) }\n    //console.log(searchTerm)\n    .then( response =>  { \n      if(searchTerm){\n        this.setState({ images: response.data.hits, error: null })\n       }\n       else {\n         this.setState({ error: \"Please, enter any serach value\" }) \n      }\n    });\n  }\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"container\">        \n        <h2 className=\"text-center my-4\">Pixabay Image Search App</h2>\n          <SearchForm searchHandle={this.searchHandle} />\n          <div className=\"row\">\n            {\n                this.state.error === null ? \n                <ImagesList images={ this.state.images } /> :      \n                <p className=\"text-center mt-4\" style={{ width: '100%', color: 'red' }}>{ this.state.error }</p>    \n            }\n          </div>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card } from 'react-bootstrap'\r\n\r\nconst ImageDetailsView = (props) => {\r\n    console.log(props)\r\n    const { largeImageURL, imageWidth, imageHeight, pageURL } = props.location.state.img\r\n    return (\r\n        <>\r\n            <div class=\"container\">            \r\n            <Card className=\"text-center\">\r\n                <Card.Img variant=\"top\" src={largeImageURL} />\r\n                <Card.Body>                \r\n                <Card.Text>\r\n                <p> Width: { imageWidth } Height: { imageHeight } </p>\r\n                <p> <a href={pageURL} target=\"_blank\" rel=\"noopener noreferrer\">Download the Image </a></p>\r\n                <Link to=\"/\"><button className=\"btn-primary\">Home</button></Link>        \r\n                </Card.Text>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                <small className=\"text-muted\">&copy; Copyright Pixabay</small>\r\n                </Card.Footer>\r\n            </Card>                           \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImageDetailsView","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport App from '../App'\r\nimport ImageDetailsView from './ImageDetailsView'\r\n\r\nconst Router = () => {\r\n    return(\r\n        <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" component={App} exact />\r\n            <Route path=\"/img/:id\" component={ImageDetailsView} />\r\n        </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Router","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}